let lib = import "src/lib.lx"

let types = {}

fn enumNameMapper(enum) {
  lib.reduce(keys(enum), {}, fn(acc, k, i) {
    acc[enum[k]] = k
    acc
  })
}

types.TOKEN = {
  let iota
  {
    LEFT_PAREN: {
      iota = lib.iota(100)
      iota()
    },
    RIGHT_PAREN: iota(),
    LEFT_BRACE: iota(),
    RIGHT_BRACE: iota(),
    LEFT_BRACKET: iota(),
    RIGHT_BRACKET: iota(),
    COMMA: iota(),
    DOT: iota(),
    MINUS: iota(),
    PLUS: iota(),
    SEMICOLON: iota(),
    SLASH: iota(),
    STAR: iota(),
    COLON: iota(),
    MOD: iota(),

    // One or two character tokens.
    BANG: {
      iota = lib.iota(200)
      iota()
    },
    BANG_EQUAL: iota(),
    EQUAL: iota(),
    EQUAL_EQUAL: iota(),
    GREATER: iota(),
    GREATER_EQUAL: iota(),
    LESS: iota(),
    LESS_EQUAL: iota(),

    // Literals.
    IDENTIFIER: {
      iota = lib.iota(300)
      iota()
    },
    STRING: iota(),
    NUMBER: iota(),

    // Keywords.
    AND: {
      iota = lib.iota(400) 
      iota()
    } ,
    OR: iota(),
    IF: iota(),
    ELSE: iota(),
    FN: iota(),
    FOR: iota(),
    NIL: iota(),
    RETURN: iota(),
    TRUE: iota(),
    FALSE: iota(),
    LET: iota(),
    BREAK: iota(),
    DEFER: iota(),
    IMPORT: iota(),

    // Termination
    ERROR: 990,
    EOF: 999,
  }
}
types.TOKEN_NAME = enumNameMapper(types.TOKEN)

types.KEYWORDS = lib.reduce(keys(types.TOKEN), {}, fn(acc, k) {
  let enum = types.TOKEN[k]
  if enum >= 400 and enum < 500 {
    acc[Lx.toLowerCase(k)] = true
  }
  acc
})

// XXX: need to keep this in sync with clox
types.OP = {
  let iota = lib.iota(0)
  {
    CONSTANT: iota(),
    CONST_BYTE: iota(),
    NIL: iota(),
    TRUE: iota(),
    FALSE: iota(),
    EQUAL: iota(),
    POP: iota(),
    GREATER: iota(),
    LESS: iota(),
    ADD: iota(),
    SUBTRACT: iota(),
    MULTIPLY: iota(),
    DIVIDE: iota(),
    NOT: iota(),
    MOD: iota(),
    NEGATE: iota(),
    RETURN: iota(),
  }
}

types.ValueType = {
  let iota = lib.iota(0)
  {
    BOOL:    iota(),
    NIL:     iota(),
    NUMBER:  iota(),
    OBJ:     iota(),
  }
}


types
