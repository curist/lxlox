let lib = {
  floor: fn(num) {
    // ^ not yet decide if we want a int() builtin
    //   or leave the implementation in a Math module
    return Lx.int(num)
  },
  join: fn(arr, sep) {
    // ^ not yet decide if we want a join() builtin
    //   or leave the implementation in an Array module
    return Lx.join(arr, sep)
  },
  parseFloat: fn(s) {
    // ^ not yet decide if we want a parseFloat() builtin
    //   or leave the implementation in an Math module
    Lx.parseFloat(s)
  },
  iota: fn (start) {
    let i = start - 1
    fn() { i = i + 1 }
  },
  map: fn(arr, cb) {
    let result = []
    let length = len(arr)
    for let i = 0; i < length; i = i + 1 {
      result = append(result, cb(arr[i], i, arr))
    }
    result
  },
  tohex: fn(num) {
    let map = {
      [10]: "a", [11]: "b", [12]: "c",
      [13]: "d", [14]: "e", [15]: "f",
    }
    if num < 0 or num > 255 {
      return nil
    }
    let x = lib.floor(num / 16)
    let y = num % 16
    return lib.join([map[x] or x, map[y] or y], "")
  },
  padStart: fn(n, length, c) {
    let s = str(n)
    if len(s) >= length {
      return s
    }
    for len(s) < length {
      s = c + s
    }
  },
  padRight: fn(n, length, c) {
    let s = str(n)
    if len(s) >= length {
      return s
    }
    for len(s) < length {
      s = s + c
    }
  },
  ord: fn(c) { Lx.ord(c) },
  concat: fn concat(arr1, arr2) {
    for let i = 0; i < len(arr2); i = i + 1 {
      arr1 = append(arr1, arr2[i])
    }
    arr1
  },
  pp: fn pp(x) {
    if type(x) == "array" {
      print(lib.join(x, ""))
    } else {
      print(x)
    }
  },
  prettyprint: fn(x) {
    fn present(x) {
      if type(x) == "array" {
        "[" + lib.join(lib.map(x, present), ",") + "]"
      } else if type(x) == "map" {
        let mapkeys = keys(x)
        let s = "{"
          let keyvalues = []
          for let i = 0; i < len(mapkeys); i = i + 1 {
            let k = mapkeys[i]
            keyvalues = append(keyvalues, k + ": " + present(x[k]))
          }
          s = s + lib.join(keyvalues, ", ")
          s = s + "}"
      } else if type(x) == "string" {
        "\"" + x + "\""
      } else {
        str(x)
      }
    }
    print(present(x))
  },

}
