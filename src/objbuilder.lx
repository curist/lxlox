let lib = import "src/lib.lx"

let VERSION = 0

// obj layout
// LX:        2
// VERSION:   1
// OBJSIZE:   4 little endian
// TBD:       16 - (2+1+4) = 9
// CODE_SECTION: ?
//      CONST_COUNT: 1
//      SIZE: 4 little endian
// CONST_SECTION: follow right after a CODE_SECTION (XXX: or should we do some padding?)
//      SIZE: 4  let's left size here, so it's possible for us to jump to next chunk
//   every const is like
//      TYPE:  1
//      VALUE: various length
//      currently we only have TYPE 00, as double, and it takes 8 bytes
// constants section should be defined at TBD: later

let ValueType = {
  let iota = lib.iota(0)
  {
    DOUBLE:    iota(),
  }
}

fn int32ToBytes(num) {
  // always return 4 bytes
  let bytes = [0, 0, 0, 0]
  bytes[0] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[1] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[2] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[3] = lib.tohex(num % 256)
  return bytes
}

fn writeBytesAt(arr1, arr2, index) {
  for let i = 0; i < len(arr2) and i + index < len(arr1); i = i + 1 {
    arr1[index + i] = arr2[i]
  }
}

fn concat(arr1, arr2) {
  // XXX: not too efficient
  for let i = 0; i < len(arr2); i = i + 1 {
    arr1 = append(arr1, arr2[i])
  }
}

fn objbuilder(chunks) {
  // XXX: handling only 1 chunk for now
  let chunk = chunks[0]
  let obj = []

  let header = ["4c", "58", lib.tohex(VERSION)]
  let fillRest = 16 - len(header)
  for let i = 0; i < fillRest; i = i + 1 {
    header = append(header, "00")
  }
  obj = concat(obj, header)

  let constantsSize = len(chunk.constants)
  obj = append(obj, lib.tohex(constantsSize))

  let codeSize = len(chunk.bytecode)
  obj = concat(obj, int32ToBytes(codeSize))
  obj = concat(obj, chunk.bytecode)

  if constantsSize > 0 {
    // save start index, we will update this to actual constants size
    let constSectionStart = len(obj)
    // reserve constants section size
    obj = concat(obj, int32ToBytes(0))

    let constants = []
    let constTypeHandlers = {
      [ValueType.DOUBLE]: fn(value) {
        let double = lib.map(Lx.doubleToUint8Array(value), fn(n) {
          lib.tohex(n)
        })
        constants = concat(constants, double)
      },
    }
    for let i = 0; i < len(chunk.constants); i = i + 1 {
      let value = chunk.constants[i]
      // TODO: check constants type
      let handler = constTypeHandlers[ValueType.DOUBLE]
      constants = append(constants, lib.tohex(ValueType.DOUBLE))
      handler(value)
    }
    // update constants section size
    writeBytesAt(obj, int32ToBytes(len(constants)), constSectionStart)

    obj = concat(obj, constants)
  }

  // update obj size
  let totalSize = len(obj)
  writeBytesAt(obj, int32ToBytes(totalSize), 6)

  return {
    obj: obj,
    dump: fn() {
      // print formatted obj in plain text
      let buffered = ""
      let totalSize = len(obj)
      for let i = 0; i < totalSize; {
        for let j = i; j < i + 16 and j < totalSize; j = j + 1 {
          buffered = buffered + obj[j]
          if j % 4 == 3 {
            buffered = buffered + "    "
          } else {
            buffered = buffered + " "
          }
        }

        i = i + 16

        if len(buffered) > 500 {
          print(buffered)
          buffered = ""
        } else {
          buffered = buffered + "\n"
        }
      }
      print(buffered)
    },
  }
}
