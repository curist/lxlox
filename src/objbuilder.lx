let lib = require("src/lib.lx")
let types = require("src/types.lx")
let object = require("src/object.lx")

let VERSION = 0

let ValueType = types.ValueType
let ObjType = object.ObjType

// obj layout
// LX:        2
// VERSION:   1
// FLAGS:     1 , 8 bits, TBD, could indicate if this is a debug release or not?
// OBJSIZE:   4 little endian
// TBD:       16 - (2+1+1+4) = 8
// CODE_SECTION: ?
//      SIZE: 4 little endian
//      CODE: vary length
//            CODE_SECTION guaranteed to be followed by 5 bytes of CONST_SECTION header
// CONST_SECTION: follow right after a CODE_SECTION
//      SIZE: 4  let's leave size here, so it's possible for us to jump to next chunk
//      CONST_COUNT: 1
//   every const is like
//      TYPE:  1
//      VALUE: vary length
// DEBUG_SECTION:
//      SIZE: 4 little endian
//      FILEPATH_LENGTH: 2 file path length
//      FILEPATH: vary length
//      TOKEN_LINE_NUMBER: 2 bytes each (which means we would only support line no. up to 65535)

fn int32ToBytes(num) {
  // always return 4 bytes
  let bytes = [0, 0, 0, 0]
  bytes[0] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[1] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[2] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[3] = lib.tohex(num % 256)
  return bytes
}

fn numberToDoubleBytes(num) {
  if num > 256*256 { return ["ff", "ff"] }
  let bytes = [0, 0]
  bytes[0] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  bytes[1] = lib.tohex(num % 256)
  num = lib.floor(num / 256)
  return bytes
}

fn doubleToBytes(num) {
  lib.map(Lx.doubleToUint8Array(num), fn(n) {
    lib.tohex(n)
  })
}

fn stringToBytes(s) {
  let bytes = []
  for let i = 0; i < len(s); i = i + 1 {
    let c = s[i]
    bytes = append(bytes, lib.tohex(lib.ord(c)))
  }
  bytes
}

fn writeBytesAt(arr1, arr2, index) {
  for let i = 0; i < len(arr2) and i + index < len(arr1); i = i + 1 {
    arr1[index + i] = arr2[i]
  }
}

fn setFlags(options) {
  let flags = 0
  if options.debug {
    flags = flags + 1
  }
  return lib.tohex(flags)
}

let concat = lib.concat

fn objbuilder(chunks, debug) {
  // XXX: handling only 1 chunk for now
  let chunk = chunks[0]
  let obj = []

  let flags = setFlags({
    debug: debug,
  })

  let header = ["4c", "58", lib.tohex(VERSION), flags]
  let fillRest = 16 - len(header)
  for let i = 0; i < fillRest; i = i + 1 {
    header = append(header, "00")
  }
  obj = concat(obj, header)

  let codeSize = len(chunk.bytecode)
  obj = concat(obj, int32ToBytes(codeSize))
  obj = concat(obj, chunk.bytecode)

  // save start index, we will update this to actual constants size
  let constSectionStart = len(obj)
  // reserve constants section size
  obj = concat(obj, int32ToBytes(0))

  let constantsSize = len(chunk.constants)
  obj = append(obj, lib.tohex(constantsSize))

  if constantsSize > 0 {
    let constants = []
    let objTypeHandlers = {
      [ObjType.STRING]: fn(value) {
        constants = concat(constants, int32ToBytes(len(value)))
        constants = concat(constants, stringToBytes(value))
      },
    }
    let constTypeHandlers = {
      // NOTE: not having nil or bool handlers here,
      // since those are represented directly as byte codes
      [ValueType.NUMBER]: fn(value) {
        let double = doubleToBytes(value)
        constants = concat(constants, double)
      },
      [ValueType.OBJ]: fn(val) {
        let handler = objTypeHandlers[val.kind]
        if handler {
          constants = append(constants, lib.tohex(val.kind))
          handler(val.value)
        } else {
          // should be unreachable
          print("Invalid obj handler type: " + str(value.kind))
          Lx.exit(55)
        }
      },
    }
    for let i = 0; i < len(chunk.constants); i = i + 1 {
      let val = chunk.constants[i]
      let handler = constTypeHandlers[val.kind]
      if handler {
        constants = append(constants, lib.tohex(val.kind))
        handler(val.value)
      } else {
        // should be unreachable
        print("Invalid value handler type: " + str(val.kind))
        Lx.exit(55)
      }
    }

    // update constants section size
    writeBytesAt(obj, int32ToBytes(len(constants)), constSectionStart)
    obj = concat(obj, constants)
  }

  if debug {
    // save start index, we will update this to actual debug size
    let debugSectionStart = len(obj)
    // reserve debug section size
    obj = concat(obj, int32ToBytes(0))
    let debugLines = []

    let filename = chunk.filename
    let filePathStringLength = numberToDoubleBytes(len(filename))
    debugLines = concat(debugLines, filePathStringLength)
    debugLines = concat(debugLines, stringToBytes(filename))

    for let i = 0; i < len(chunk.lines); i = i + 1 {
      debugLines = concat(debugLines, numberToDoubleBytes(chunk.lines[i]))
    }

    // update debug section size
    writeBytesAt(obj, int32ToBytes(len(debugLines)), debugSectionStart)
    obj = concat(obj, debugLines)
  }

  // update obj size
  let totalSize = len(obj)
  writeBytesAt(obj, int32ToBytes(totalSize), 4)

  return {
    obj: obj,
    dump: fn() {
      // print formatted obj in plain text
      let buffered = ""
      let totalSize = len(obj)
      for let i = 0; i < totalSize; {
        for let j = i; j < i + 16 and j < totalSize; j = j + 1 {
          buffered = buffered + obj[j]
          if j % 4 == 3 {
            buffered = buffered + "    "
          } else {
            buffered = buffered + " "
          }
        }

        i = i + 16

        if len(buffered) > 500 {
          print(buffered)
          buffered = ""
        } else {
          buffered = buffered + "\n"
        }
      }
      print(buffered)
    },
  }
}
